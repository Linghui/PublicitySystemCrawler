from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time,requests, execjs
from bs4 import BeautifulSoup
from fake_useragent import UserAgent

class SourceGet():
    def __init__(self, target_url):
        self.target_url = target_url

    def get_cookie(self):
        response = requests.get(self.target_url)
        jsluid = response.headers['Set-Cookie'].split('=')[1].split(';')[0]
        js_code1 = response.text
        js_code1 = js_code1.rstrip('\n')
        js_code1 = js_code1.replace('</script>', '')
        js_code1 = js_code1.replace('<script>', '')
        index = js_code1.rfind('}')
        js_code1 = js_code1[0:index + 1]
        js_code1 = 'function getCookie() {' + js_code1 + '}'
        js_code1 = js_code1.replace('eval', 'return')
        js_code2 = execjs.compile(js_code1)
        code = js_code2.call('getCookie')
        code = 'var a' + code.split('document.cookie')[1].split("Path=/;'")[0] + "Path=/;';return a;"
        code = ' window = {}; document = {"createElement": function(){return {"firstChild": {"href": "http://www.gsxt.gov.cn/"}}}}; \n' + code
        js_final = "function getClearance(){" + code + "};"
        js_final = js_final.replace("return return", "return eval")
        ctx = execjs.compile(js_final)
        jsl_clearance = ctx.call('getClearance')
        jsl_cle = jsl_clearance.split(';')[0].split('=')[1]
        full_cookie = f'__jsluid_h={jsluid};__jsl_clearance={jsl_cle}'
        return full_cookie

    def run(self):
        # 创建chrome浏览器驱动，无头模式
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument(UserAgent().random)
        chrome_options.add_argument(self.get_cookie())
        driver = webdriver.Chrome('chromedriver.exe', chrome_options=chrome_options)

        # 加载界面
        driver.get(self.target_url)
        time.sleep(2)

        # 获取页面初始高度
        js = "return action=document.body.scrollHeight"
        height = driver.execute_script(js)

        # 将滚动条调整至页面底部
        driver.execute_script('window.scrollTo(0,document.body.scrollHeight)')
        time.sleep(4)

        # 定义初始时间戳（秒）
        t1 = int(time.time())

        # 定义循环标识，用于终止while循环
        status = True

        # 重试次数
        num = 0

        # 模拟网页下拉动作实现全部数据加载
        while status:
            # 获取当前时间戳（秒）
            t2 = int(time.time())
            # 判断时间初始时间戳和当前时间戳相差是否小于30秒，小于30秒则下拉滚动条
            if t2 - t1 < 30:
                new_height = driver.execute_script(js)
                if new_height > height:
                    time.sleep(1)
                    driver.execute_script('window.scrollTo(0, document.body.scrollHeight)')
                    # 重置初始页面高度
                    height = new_height
                    # 重置初始时间戳，重新计时
                    t1 = int(time.time())
            elif num < 3:  # 当超过30秒页面高度仍然没有更新时，进入重试逻辑，重试3次，每次等待30秒
                time.sleep(3)
                num = num + 1
            else:  # 超时并超过重试次数，程序结束跳出循环，并认为页面已经加载完毕！
                print("滚动条已经处于页面最下方！")
                status = False
                # 滚动条调整至页面顶部
                driver.execute_script('window.scrollTo(0, 0)')
                break

        return driver.page_source

# 打印页面源码
# content = driver.page_source
# with open(r"C:\Users\zengc\Desktop\page_source.txt", "w", encoding='utf-8') as f:
#     f.write(content)
# print("done")
